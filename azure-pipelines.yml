trigger:
  branches:
    include:
    - main
  paths:
    exclude:
    - README.md
    - docs/*

pool:
  name: Azure Pipelines
  vmImage: windows-latest
  demands: msbuild

variables:
- group: General
- group: Xunit.Runner.TestSuiteInstrumentation
- name: isMain
  value: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]
- name: PackageVersion
  ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/main') }}:
    value: $[format('{0}.{1}', variables['MajorMinorVersions'], counter(variables['MajorMinorVersions'], 0))]
  ${{ else }}:
    value: $[format('{0}', counter('SequenceNumber', 1))]

name: $(PackageVersion)

steps:
- task: UseDotNet@2
  displayName: 'Use .NET Core sdk 9.x'
  inputs:
    version: 9.x

- bash: |
   dotnet nuget locals all --clear 
   dotnet workload install maui --source https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet7/nuget/v3/index.json --source https://api.nuget.org/v3/index.json
   dotnet workload install android maui wasm-tools --source https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet7/nuget/v3/index.json --source https://api.nuget.org/v3/index.json
  displayName: 'Install MAUI'

- task: Bash@3
  displayName: Restore nuget
  inputs:
    targetType: 'inline'
    script: dotnet restore Xunit.Runner.TestSuiteInstrumentation.sln

- task: Bash@3
  displayName: Build Solution
  inputs:
    targetType: 'inline'
    script: dotnet build Xunit.Runner.TestSuiteInstrumentation.sln --configuration $(buildConfiguration) --output $(outputDirectory)/

- task: Bash@3
  displayName: 'Start Android emulator'
  inputs:
    targetType: filePath
    filePath: ./Scripts/RunAndroidEmulator.sh
  enabled: false

- task: Bash@3
  displayName: 'Install Integration Tests'
  inputs:
    targetType: filePath
    filePath: ./Scripts/InstallApkToEmulator.sh
    arguments: '$(outputDirectory)/com.companyname.droid.integrationtests.apk'
  enabled: false

- task: Bash@3
  displayName: 'Bash Script'
  inputs:
    targetType: filePath
    filePath: ./Scripts/RunIntegrationTest.sh
    arguments: '$(Build.SourcesDirectory) com.companyname.droid.integrationtests sample.testSuiteInstrumentation'
  enabled: false

- task: PublishTestResults@2
  displayName: 'Publish Test Results'
  inputs:
    testResultsFormat: VSTest
    testResultsFiles: '**/TestResults.trx'
    mergeTestResults: true
    failTaskOnFailedTests: true
    failTaskOnMissingResultsFile: true
    testRunTitle: 'Integration tests'
  enabled: false

- script: |
    dotnet pack src/Xunit.Runner.TestSuiteInstrumentation.Droid.csproj --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory) --include-symbols /p:PackageVersion=$(PackageVersion) /p:IncludeReferencedProjects=true /p:PackageReleaseNotes="$(releaseNotes)"
  displayName: 'Nuget pack for PR check'
  condition: and(succeeded(), eq(variables.isMain, false))

- script: |
    dotnet pack src/Xunit.Runner.TestSuiteInstrumentation.Droid.csproj --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory) --include-symbols /p:PackageVersion=$(PackageVersion) /p:IncludeReferencedProjects=true /p:PackageReleaseNotes="$(releaseNotes)"
  displayName: 'Nuget pack for PR check'
  condition: and(succeeded(), eq(variables.isMain, true))

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: drop'
  condition: succeededOrFailed()

- task: NuGetCommand@2
  displayName: 'NuGet push'
  condition: and(succeeded(), eq(variables.isMain, true))
  inputs:
    command: push
    nuGetFeedType: external
    publishFeedCredentials: '$(publishFeedCredentials)'
